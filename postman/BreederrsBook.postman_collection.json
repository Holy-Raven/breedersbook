{
	"info": {
		"_postman_id": "71e81342-c4c2-4317-bd10-1ea4fb65f5c4",
		"name": "BreederrsBook",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26331321"
	},
	"item": [
		{
			"name": "home page",
			"item": [
				{
					"name": "get home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате String\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.string;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/home"
					},
					"response": []
				},
				{
					"name": "get hello breeder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате String\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.string;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/home/hello-breeder"
					},
					"response": []
				},
				{
					"name": "get hello user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате String\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.string;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/home/hello-user"
					},
					"response": []
				},
				{
					"name": "get hello buyer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате String\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.string;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/home/hello-buyer"
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "add user Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Jared\",\n  \"lastName\": \"Leto\",\n  \"email\": \"j.leto@yandex.ru\",\n  \"username\": \"jared\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Teylor\",\n  \"lastName\": \"Momson\",\n  \"email\": \"t.momson@yandex.ru\",\n  \"username\": \"momson\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add user Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Till\",\n  \"lastName\": \"Lindemann\",\n  \"email\": \"t.lindemann@yandex.ru\",\n  \"username\": \"lindemann\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user Ozzy Osbourne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Ozzy\",\n  \"lastName\": \"Osbourne\",\n  \"email\": \"o.osbourne@yandex.ru\",\n  \"username\": \"osbourne\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user Paul McCartney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Paul\",\n  \"lastName\": \"McCartney\",\n  \"email\": \"p.mccartney@yandex.ru\",\n  \"username\": \"mccartney\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "get user Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add user empty firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"lastName\": \"Spears\",\n  \"email\": \"b.spears@yandex.ru\",\n  \"username\": \"bspears\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user empty username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Stas\",\n  \"lastName\": \"Asafev\",\n  \"email\": \"s.asafev@yandex.ru\",\n  \"password\": \"123456789\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user empty email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Stas\",\n  \"lastName\": \"Asafev\",\n  \"username\": \"asafev\",\n  \"password\": \"123456789\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user not valid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Stas\",\n  \"lastName\": \"Asafev\",\n  \"username\": \"asafev\",\n  \"email\": \"s.asafevyandex.ru\",\n  \"password\": \"123456789\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "deleting user (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/users/:userId?delete=none",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "delete",
									"value": "none"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add user Paul McCartney (bad email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Paul\",\n  \"lastName\": \"McCartney\",\n  \"email\": \"p.mccartney@yandex.ru\",\n  \"username\": \"mccartney\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "add user Paul McCartney (again with new email)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Paul\",\n  \"lastName\": \"McCartney\",\n  \"email\": \"newp.mccartney@yandex.ru\",\n  \"username\": \"newmccartney\",\n  \"password\": \"1234567890\"\n}"
						},
						"url": "{{baseUrl}}/users"
					},
					"response": []
				},
				{
					"name": "get user Paul McCartney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "7",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/users"
					},
					"response": []
				},
				{
					"name": "deleting user (private)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "7",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/users"
					},
					"response": []
				},
				{
					"name": "path user Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Jaredeto\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/users/profile"
					},
					"response": []
				},
				{
					"name": "path user Jared Leto bad email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 400 и оповещать о конфликте\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"coolmannyandex.ru\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/users/profile"
					},
					"response": []
				},
				{
					"name": "path user Jared Leto update pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 200 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"jared\",\r\n  \"password\": \"1234567890\",\r\n  \"newPassword\": \"987654321\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/users/pass"
					},
					"response": []
				},
				{
					"name": "path user Jared Leto update wrong pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 400 и оповещать о конфликте\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"jared\",\r\n  \"password\": \"987654321\",\r\n  \"newPassword\": \"987654321\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/users/pass"
					},
					"response": []
				},
				{
					"name": "deleting user (admin) full",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/users/:userId?delete=full",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "delete",
									"value": "full"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleting user (admin) not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/users/:userId?delete=full",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users",
								":userId"
							],
							"query": [
								{
									"key": "delete",
									"value": "full"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Info",
			"item": [
				{
					"name": "add user User Info Jared Leto phone +7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Актер, музыкант и просто хороший человек.\",\n  \"phone\": \"+7 915 023 15 87\",\n  \"photo\": \"https://w-dog.ru/wallpapers/4/14/436411029196487/dzhared-leto-ot-30-sekund-do-marsa.jpg\",\n  \"birthDate\": \"1971-12-26 11:00:00\",\n  \"gender\": \"MALE\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "add user User Info Teylor Momsen phone 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Сперва популярная актрисса, а потом уже и рок герл.\",\n  \"phone\": \"8 987 564 77 51\",\n  \"photo\": \"https://w.forfun.com/fetch/e4/e452d3b29d9483b0c49eb1d4a7f4b054.jpeg\",\n  \"birthDate\": \"1971-12-06 08:00:00\",\n  \"gender\": \"FEMALE\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "add user User Info Till Lindemann unknow gender",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Человек зановао открывший миру немецкий язык.\",\n  \"phone\": \"+7 908 666 14 88\",\n  \"photo\": \"https://image.atsw.de/atsw/production/2019-10/Till-Lindemann-video.jpg?h=&amp;rect=center%2Cmiddle%2C3355%2C2516&amp;w=800\",\n  \"birthDate\": \"1963-01-04 15:00:00\",\n  \"gender\": \"GAY\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "get user info Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "deleting user info Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "get user info not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/private/userinfo/:userinfoId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"private",
								"userinfo",
								":userinfoId"
							],
							"variable": [
								{
									"key": "userinfoId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "path user info Teylor Momsen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Сперва популярная актрисса, а потом уже и настоящая рок ЗВЕЗДА!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "get user info Teylor Momsen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "add user User Info Jared Leto again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Актер, музыкант и просто хороший человек.\",\n  \"phone\": \"+7 915 023 15 87\",\n  \"photo\": \"https://w-dog.ru/wallpapers/4/14/436411029196487/dzhared-leto-ot-30-sekund-do-marsa.jpg\",\n  \"birthDate\": \"1971-12-26 11:00:00\",\n  \"gender\": \"MALE\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "add user User Info Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Человек зановао открывший миру немецкий язык.\",\n  \"phone\": \"+7 908 666 14 88\",\n  \"photo\": \"https://image.atsw.de/atsw/production/2019-10/Till-Lindemann-video.jpg?h=&amp;rect=center%2Cmiddle%2C3355%2C2516&amp;w=800\",\n  \"birthDate\": \"1963-01-04 15:00:00\",\n  \"gender\": \"MALE\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				},
				{
					"name": "add user User Info Ozzy Osbourne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Отец всей тяжелой рок музыки, не больше не меньше\",\n  \"phone\": \"+7 919 355 07 22\",\n  \"photo\": \"https://rusvesna.su/sites/default/files/styles/orign_wm/public/ozzi_osborn.jpg\",\n  \"birthDate\": \"1948-12-03 07:00:00\",\n  \"gender\": \"MALE\"\n}"
						},
						"url": "{{baseUrl}}/private/userinfo"
					},
					"response": []
				}
			]
		},
		{
			"name": "Breed",
			"item": [
				{
					"name": "addCatBreed - British",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('furType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petType\": \"cat\",\n    \"name\": \"British\",\n    \"description\": \"The British Shorthair has a broad chest, muscular neck, strong jaws and a well developed muzzle. The legs are thick and strong. The breed looks like what she originally was, a cat that was to keep rodents out of the barn and the house. The coat of the British is thick and dense.\",\n    \"furType\": \"short\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/admin/breeds"
					},
					"response": []
				},
				{
					"name": "addDogBreed - Brussels Griffon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('furType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petType\": \"dog\",\n    \"name\": \"Brussels Griffon\",\n    \"description\": \"Brussels griffons are small-sized dogs weighing eight to 12 pounds (four to six kilograms). A Brussels griffon's height is about 10 inches at the shoulder. Their body is square and their head is large and round with a very short nose.\",\n    \"furType\": \"short\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/admin/breeds"
					},
					"response": []
				},
				{
					"name": "addDogBreed - Сhinese crested",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('furType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petType\": \"dog\",\n    \"name\": \"Сhinese crested\",\n    \"description\": \"Dogs of this breed can be both naked (hair is available only in the area of the head, tail and limbs), and with soft veil—like hair covering the entire body - puffs (powder puff)\",\n    \"furType\": \"short\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/admin/breeds"
					},
					"response": []
				},
				{
					"name": "getBreedById - cat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('furType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/admin/breeds/1"
					},
					"response": []
				},
				{
					"name": "getBreedById - dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('furType');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/admin/breeds/2"
					},
					"response": []
				},
				{
					"name": "getAllBreedByRype - dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/breeds?type=dog&from=0&size=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"breeds"
							],
							"query": [
								{
									"key": "type",
									"value": "dog"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Kennel",
			"item": [
				{
					"name": "add kennel Jared Leto bad phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"DOG\",\n  \"name\": \"Golden Psarnya\",\n  \"descriptions\": \"Psarnya Jared Leto\",\n  \"phone\": \"5 (975) 325-78-86\",\n  \"photo\": \"https://www.isrageo.com/wp-content/uploads/2020/07/sobvek-.jpg\",\n  \"created\": \"2010-10-11 08:00:00\",\n  \"breedId\": \"2\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel Jared Leto created in past",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"DOG\",\n  \"name\": \"Golden Psarnya\",\n  \"descriptions\": \"Psarnya Jared Leto\",\n  \"phone\": \"8 (975) 325-78-86\",\n  \"photo\": \"https://www.isrageo.com/wp-content/uploads/2020/07/sobvek-.jpg\",\n  \"created\": \"2030-10-11 08:00:00\",\n  \"breedId\": \"2\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"DOG\",\n  \"name\": \"Golden Psarnya\",\n  \"descriptions\": \"Psarnya Jared Leto\",\n  \"phone\": \"8 (975) 325-78-86\",\n  \"photo\": \"https://www.isrageo.com/wp-content/uploads/2020/07/sobvek-.jpg\",\n  \"created\": \"2010-10-11 08:00:00\",\n  \"breedId\": \"2\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel  Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"CAT\",\n  \"name\": \"Tsap-Csarap\",\n  \"descriptions\": \"Cat's-House by Taylor Momsen\",\n  \"phone\": \"8 (966) 566-08-12\",\n  \"photo\": \"https://psihosamatica.ru/wp-content/uploads/2023/01/kotyi.jpg\",\n  \"created\": \"2018-12-01 12:00:00\",\n  \"breedId\": \"1\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel  Teylor Momson not uniq name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"CAT\",\n  \"name\": \"Tsap-Csarap\",\n  \"descriptions\": \"Cat's-House by Taylor Momsen\",\n  \"phone\": \"8 (986) 566-08-12\",\n  \"photo\": \"https://psihosamatica.ru/wp-content/uploads/2023/01/kotyi.jpg\",\n  \"created\": \"2018-12-01 12:00:00\",\n  \"breedId\": \"1\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"DOG\",\n  \"name\": \"Psarnya №1\",\n  \"descriptions\": \"Psarnya Till Lindemann\",\n  \"phone\": \"8 (987) 856-12-11\",\n  \"photo\": \"https://blog.dogbuddy.com/wp-content/uploads/2016/07/1280x720-63S-1152x720.jpg\",\n  \"created\": \"2006-08-09 06:00:00\",\n  \"breedId\": \"3\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel Ozzy Osbourne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"CAT\",\n  \"name\": \"Mur-Rock pride\",\n  \"descriptions\": \"Cat's-House by Ozzy Osbourne\",\n  \"phone\": \"8 (998) 118-05-19\",\n  \"photo\": \"https://avatars.dzeninfra.ru/get-zen_brief/6271726/pub_629e5f3e9cd04c7f1ce0a54e_629e616d25adf418085d6014/scale_1200\",\n  \"created\": \"1988-02-08 07:00:00\",\n    \"breedId\": \"1\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "get all admin kennel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/admin/kennels"
					},
					"response": []
				},
				{
					"name": "get all public kennel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/kennels"
					},
					"response": []
				},
				{
					"name": "get all public kennel cat-british",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/kennels?type=cat&breed=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"kennels"
							],
							"query": [
								{
									"key": "type",
									"value": "cat"
								},
								{
									"key": "breed",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get all public kennel dog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/kennels?type=dog",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"kennels"
							],
							"query": [
								{
									"key": "type",
									"value": "dog"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get kennel Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/kennels/:kennelId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"kennels",
								":kennelId"
							],
							"variable": [
								{
									"key": "kennelId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleting kennel (admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/kennels/:kennelId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"kennels",
								":kennelId"
							],
							"variable": [
								{
									"key": "kennelId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleting kennel (admin) not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/kennels/:kennelId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"kennels",
								":kennelId"
							],
							"variable": [
								{
									"key": "kennelId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get kennel Teylor Momson not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/kennels/:kennelId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"kennels",
								":kennelId"
							],
							"variable": [
								{
									"key": "kennelId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "add kennel  Teylor Momson again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"CAT\",\n  \"name\": \"Tsap-Csarap\",\n  \"descriptions\": \"Cat's-House by Taylor Momsen\",\n  \"phone\": \"8 (966) 566-08-12\",\n  \"photo\": \"https://psihosamatica.ru/wp-content/uploads/2023/01/kotyi.jpg\",\n  \"created\": \"2018-12-01 12:00:00\",\n  \"breedId\": \"1\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "deleting kennel (private)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "add kennel  Teylor Momson again again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"petType\": \"CAT\",\n  \"name\": \"Tsap-Csarap\",\n  \"descriptions\": \"Cat's-House by Taylor Momsen\",\n  \"phone\": \"8 (966) 566-08-12\",\n  \"photo\": \"https://psihosamatica.ru/wp-content/uploads/2023/01/kotyi.jpg\",\n  \"created\": \"2018-12-01 12:00:00\",\n  \"breedId\": \"1\"\n}"
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "path kennel Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Kusi da Kusay\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				},
				{
					"name": "path kennel Jared Leto not uniq phone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"phone\": \"8 (966) 566-08-12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/kennels"
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "add location Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"Russia\",\n  \"city\": \"Penza\",\n  \"street\": \"Mira\",\n  \"house\": \"15\",\n  \"apartment\": \"145\"\n}"
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "add location Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"Russia\",\n  \"city\": \"Samara\",\n  \"street\": \"Lenina\",\n  \"house\": \"7\",\n  \"apartment\": \"231\"\n}"
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "add location Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"Kazakhstan\",\n  \"city\": \"Nursultan\",\n  \"street\": \"Svobodi\",\n  \"house\": \"9\",\n  \"apartment\": \"15\"\n}"
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "path location Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"city\": \"Almna-Ati\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "deleting location Till Lindemann",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "add location Till Lindemann again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"Russia\",\n  \"city\": \"Sankt-Petersburg\",\n  \"street\": \"Nevski Prospekt\",\n  \"house\": \"20\",\n  \"apartment\": \"25\"\n}"
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "add location kennel Jared Leto default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/private/location/kennel/default"
					},
					"response": []
				},
				{
					"name": "add location kennel Ozzy Osbourne default error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и оповещать о конфликте\", function() {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/private/location/kennel/default"
					},
					"response": []
				},
				{
					"name": "add location kennel Till Lindemann default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "3",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/private/location/kennel/default"
					},
					"response": []
				},
				{
					"name": "add location kennel Teylor Momson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"country\": \"Russia\",\r\n  \"city\": \"Aleksandrovka\",\r\n  \"street\": \"Kuibisheva\",\r\n  \"house\": \"12\",\r\n  \"apartment\": \"10\"\r\n}"
						},
						"url": "{{baseUrl}}/private/location/kennel"
					},
					"response": []
				},
				{
					"name": "path location kennel Jared Leto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статус 409 и данные в формате json\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"}); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"country\": \"Russia\",\r\n  \"city\": \"Istanbul\",\r\n  \"street\": \"Ataturk\",\r\n  \"house\": \"1\",\r\n  \"apartment\": \"9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/location/kennel"
					},
					"response": []
				},
				{
					"name": "add location Ozzy Osbourne",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"Russia\",\n  \"city\": \"Moscow\",\n  \"street\": \"Varvarka\",\n  \"house\": \"7\",\n  \"apartment\": \"14\"\n}"
						},
						"url": "{{baseUrl}}/private/location/user"
					},
					"response": []
				},
				{
					"name": "add location kennel Ozzy Osbourne default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							},
							{
								"key": "B-B-User-Id",
								"value": "4",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/private/location/kennel/default"
					},
					"response": []
				}
			]
		},
		{
			"name": "Pet",
			"item": [
				{
					"name": "addCat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('pattern');",
									"    pm.expect(jsonData).to.have.property('colors');",
									"    pm.expect(jsonData).to.have.property('sterilized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petType\": \"cat\",\n    \"gender\": \"male\",\n    \"pattern\": \"solid\",\n    \"colors\": [\n        \"grey\"\n    ],\n    \"temper\": \"Calm as a sofa cushion\",\n    \"name\": \"Ozzy\",\n    \"description\": \"Soft sofa cushion. Gets along great with children. He doesn’t let himself be chewed. Doesn't sit on hands.\",\n    \"birthDate\": \"2011-12-10\",\n    \"forSale\": false,\n    \"sterilized\": false,\n    \"breedId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/pets"
					},
					"response": []
				},
				{
					"name": "addDog",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('pattern');",
									"    pm.expect(jsonData).to.have.property('colors');",
									"    pm.expect(jsonData).to.have.property('sterilized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petType\": \"dog\",\n    \"gender\": \"female\",\n    \"pattern\": \"solid\",\n    \"colors\": [\n        \"black\",\n        \"brown\"\n    ],\n    \"temper\": \"Is highly affectionate and forms strong bonds with their owners. They thrive on human companionship and are always eager to be by their side.\",\n    \"name\": \"Ozzy\",\n    \"description\": \"Can also be a bit stubborn at times, so a consistent, kind, and patient hand is essential.\",\n    \"birthDate\": \"2021-12-10\",\n    \"forSale\": true,\n    \"price\": 5000,\n    \"sterilized\": false,\n    \"breedId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/pets"
					},
					"response": []
				},
				{
					"name": "getUsersPetById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('pattern');",
									"    pm.expect(jsonData).to.have.property('colors');",
									"    pm.expect(jsonData).to.have.property('sterilized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/pets/1"
					},
					"response": []
				},
				{
					"name": "getUsersPetById2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('pattern');",
									"    pm.expect(jsonData).to.have.property('colors');",
									"    pm.expect(jsonData).to.have.property('sterilized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "2",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/pets/2"
					},
					"response": []
				},
				{
					"name": "getAllPetsByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Test list events response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData).is.an('array'); ",
									"    pm.expect(jsonData.length, 'List length must be not 0').to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/private/pets"
					},
					"response": []
				},
				{
					"name": "patchPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									"pm.test(\"Has response\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Test location fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('petType');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('description');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('pattern');",
									"    pm.expect(jsonData).to.have.property('colors');",
									"    pm.expect(jsonData).to.have.property('sterilized');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "B-B-User-Id",
								"value": "1",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"saleStatus\": \"for_sale\",\n    \"price\": 5000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/private/pets/1"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "id1",
			"value": "1"
		}
	]
}