package ru.codesquad.pet.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import lombok.*;
import lombok.experimental.FieldDefaults;
import ru.codesquad.kennel.Kennel;
import ru.codesquad.pet.enums.PetType;
import ru.codesquad.pet.enums.SaleStatus;
import ru.codesquad.user.User;
import ru.codesquad.util.enums.Gender;

import javax.persistence.*;
import java.time.LocalDate;

import static ru.codesquad.util.Constant.DATE_FORMAT;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "pets", schema = "public")
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
@FieldDefaults(level = AccessLevel.PRIVATE)
public class Pet {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @EqualsAndHashCode.Include
    private Long id;

    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private PetType type;

    @Enumerated(EnumType.STRING)
    @Column(name = "gender", nullable = false)
    private Gender gender;

    @Column(name = "color", nullable = false)
    private String color;

    @Column(name = "temper", nullable = false)
    private String temper;

    @Column(name = "description", nullable = false)
    private String description;

    @Column(name = "name", nullable = false)
    String name;

    @Column(name = "birth_date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = DATE_FORMAT)
    LocalDate birthDate;

    @Column(name = "death_date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = DATE_FORMAT)
    LocalDate deathDate;

    @Column(name = "price")
    int price;

    @Column(name = "sale_status")
    SaleStatus saleStatus;

    @Column(name = "sale_date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = DATE_FORMAT)
    LocalDate saleDate;

    @Column(name = "passport_img")
    String passportImg;

    @Column(name = "sterilization")
    boolean sterilization;

    @ManyToOne (fetch = FetchType.LAZY)
    @JoinColumn(name = "kennel_id")
    Kennel kennel;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "owner_id")
    User user;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "breed_id")
    Breed breed;
}

//id            BIGINT GENERATED BY DEFAULT AS IDENTITY                       NOT NULL,
//    type          VARCHAR(50)                                                   NOT NULL,
//    sex           BOOLEAN                                                       NOT NULL,
//    color         VARCHAR(50)                                                   NOT NULL,
//    temper        VARCHAR(2000),
//    description   VARCHAR(5000),
//    name          VARCHAR(250),
//    birth_date    TIMESTAMP WITHOUT TIME ZONE CHECK (birth_date < CURRENT_DATE) NOT NULL,
//    death_date    TIMESTAMP WITHOUT TIME ZONE,
//    price         INTEGER,
//    sale_status   VARCHAR(20)                                                   NOT NULL,
//    sale_date     TIMESTAMP WITHOUT TIME ZONE CHECK (birth_date < CURRENT_DATE),
//    passport_img  VARCHAR(50),
//    sterilization BOOLEAN DEFAULT FALSE                                         NOT NULL,
//
//    kennel_id     BIGINT                                                        NOT NULL,
//    owner_id      BIGINT                                                        NOT NULL,
//    breed_id      BIGINT                                                        NOT NULL,
